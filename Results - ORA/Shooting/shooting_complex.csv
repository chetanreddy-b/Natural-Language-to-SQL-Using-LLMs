Natural Language Query,SQL Query,Schema,Top 5 Entries of Table,phi,lfm
"For each state, get total suspects arrested per million capita","SELECT T1.State, (CAST(T1.SuspectsArrestedSum AS decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS SuspectsArrestedPerMillionCapita FROM 
(SELECT State, year(IncidentDate) as IncidentYear, Sum(SuspectsArrested) AS SuspectsArrestedSum from us_shootings GROUP BY State, IncidentYear) T1
JOIN 
(SELECT State, PopulationCount FROM us_population GROUP BY State, PopulationCount) T2
ON T1.State LIKE T2.State
ORDER BY SuspectsArrestedPerMillionCapita DESC","us_population (CensurYear, State, PopulationCount)
us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)","2010; alabama; 4779736
2010; alaska; 710231
2010; american samoa; 55519
2010; arizona; 6392017
2010; arkansas; 477936

92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0 
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8"," ```sql
SELECT 
    p.State,
    (
        SELECT 
            SUM(s.SuspectsArrested) / (p.PopulationCount / 1000000.0)
        FROM 
            us_shootings s
        WHERE 
            p.State = s.State
    ) AS arrests_per_million
FROM 
    us_population p
GROUP BY 
    p.State;
```

This SQL query joins the `us_population` and `us_shootings` tables based on the `State` column, sums up the `SuspectsArrested` from `us_shootings` table, and divides by the population count per million to get the total suspects arrested per million capita for each state. The subquery calculates the sum of arrested suspects for each state, and then it's divided by the population count per million people from the `us_population` table. The grouping by `State` dismisses cases without population data. The result gives the average number of suspects arrested per million capita for each state.","SELECT 
  csp.*, 
  (COUNT(csp.ID) OVER (PARTITION BY csp.State) * 1000000.0 / pp.PopulationCount) AS suspects_arrested_per_million_capita 
FROM 
  us_shootings AS csp 
LEFT JOIN 
  us_population AS pp ON csp.State = pp.State 
WHERE 
  csp.Year = 2010 
GROUP BY 
  csp.State, 
  csp.ID, 
  pp.PopulationCount 
ORDER BY 
  csp.State;"
Get count of homeless population and US shooting incidents for each year.,"SELECT * FROM 
(SELECT Count(*) as IncidentCount, year(IncidentDate) as IncidentYear   FROM us_shootings GROUP BY IncidentYear) T1
JOIN
(SELECT sum(EXPERIENCING_HOMELESSNESS_CNT) as HomelessnessCount, CALENDAR_YEAR FROM experiencing_homelessness_age_demographics group by CALENDAR_YEAR) T2
ON T2.CALENDAR_YEAR = T1.IncidentYear 
ORDER BY IncidentCount DESC ","experiencing_homelessness_age_demographics (CALENDAR_YEAR, LOCATION, AGE_GROUP_PUBLIC, EXPERIENCING_HOMELESSNESS_CNT)","2,017; California; 25-34; 28,654
2,017; California; 35-44; 25,831
2,017; California; 45-54; 27,651
2,017; California; 55-64; 23,396
2,017; California; 65+; 7,111"," To fulfill the natural language request, you can use the following SQL query to get the count of homeless population and probably the count of US shooting incidents, assuming we have a separate table for shooting incidents with similar columns. Let's call the new table USSN SHOOTING INCIDENTS (Incident_Year, LOCATION, Incident_Count):

```sql
SELECT 
  e.CALENDAR_YEAR AS Year,
  e.LOCATION AS Location,
  e.EXPERIENCING_HOMELESSNESS_CNT AS Homeless_Population,
  s.Incident_Count AS US_Shooting_Incidents
FROM 
  experiencing_homelessness_age_demographics e
LEFT JOIN USSN_SHOOTING_INCIDENTS s
  ON e.CALENDAR_YEAR = s.Incident_Year AND e.LOCATION = s.LOCATION
ORDER BY
  Year;
```

This query joins the `experiencing_homelessness_age_demographics` table (aliased as `e`) with the `USSN_SHOOTING_INCIDENTS` table (aliased as `s`). The join is made on both `CALENDAR_YEAR` and `LOCATION` to merge the data for each year and location. The left join ensures that all information from `experiencing_homelessness_age_demographics` is displayed even if there are no shooting incidents reported for a given year and location. Finally, the `ORDER BY` clause sorts the results by the year in ascending order.

Please note that the above query assumes that there is a similar `USSSN_SHOOTING_INCIDENTS` table available with the mentioned schema. If a different table schema for shooting incidents is used, you will need to adjust the query accordingly.","SELECT 
    experiencing_homelessness_age_demographics.CALENDAR_YEAR,
    COUNT(CASE WHEN experiencing_homelessness_age_demographics.LOCATION = 'California' THEN experiencing_homelessness_age_demographics.EXPERIENCING_HOMELESSNESS_CNT ELSE 0 END) AS homeless_population_count,
    COUNT(CASE WHEN US_SHOOTING_INCIDENTS.SHOOTING_YEAR IS NOT NULL THEN 1 ELSE 0 END) AS US_shooting_incidents_count
FROM 
    experiencing_homelessness_age_demographics
LEFT JOIN 
    (SELECT DISTINCT CALENDAR_YEAR AS SHOOTING_YEAR FROM US_SHOOTING_INCIDENTS) AS US_SHOOTING_INCIDENTS
ON 
    experiencing_homelessness_age_demographics.CALENDAR_YEAR = US_SHOOTING_INCIDENTS.SHOOTING_YEAR
GROUP BY 
    experiencing_homelessness_age_demographics.CALENDAR_YEAR;"
Get homeless population per capita for each county of California.,"SELECT T2.County, (CAST(T1.HomelessnessCount AS decimal) / CAST((T2.PopulationCountSum) AS decimal)) AS HomelessnessCountCapita FROM
(SELECT sum(EXPERIENCING_HOMELESSNESS_CNT) as HomelessnessCount, lower(LOCATION) as Area FROM experiencing_homelessness_age_demographics WHERE LOCATION NOT LIKE ""california"" group by Area order by HomelessnessCount) T1
join
(SELECT County, Sum(PopulationCount) as PopulationCountSum FROM us_population_county GROUP BY County) T2
ON T1.Area LIKE concat('%', T2.County, '%')
ORDER BY HomelessnessCountCapita DESC","experiencing_homelessness_age_demographics (CALENDAR_YEAR, LOCATION, AGE_GROUP_PUBLIC, EXPERIENCING_HOMELESSNESS_CNT)
us_population_county (PopulationCount, County)","2,017; California; 25-34; 28,654
2,017; California; 35-44; 25,831
2,017; California; 45-54; 27,651
2,017; California; 55-64; 23,396
2,017; California; 65+; 7,111

10,014,009; los angeles
5,275,541; cook
4,420,568; maricopa
3,298,634; san diego
3,186,989; orange"," Here is a SQL query to get the homeless population per capita for each county of California:

```sql
SELECT
    homeless_data.LOCATION AS County, 
    homeless_data.CALENDAR_YEAR AS Year, 
    SUM(homeless_data.EXPERIENCING_HOMELESSNESS_CNT) AS HomelessPopulation, 
    us_population.PopulationCount AS TotalPopulation,
    (
        SUM(homeless_data.EXPERIENCING_HOMELESSNESS_CNT) / us_population.PopulationCount
    ) * 100 AS PerCapitaHomeless
FROM
    experiencing_homelessness_age_demographics AS homeless_data
JOIN 
    us_population_county AS us_population
    ON homeless_data.LOCATION = us_population.County
WHERE 
    homeless_data.CALENDAR_YEAR = '2017'
GROUP BY 
    homeless_data.LOCATION, 
    homeless_data.CALENDAR_YEAR, 
    us_population.PopulationCount
```
 
What the query does:

1. Connect the `experiencing_homelessness_age_demographics` and `us_population_county` tables using a JOIN clause on the county field.
2. Filter the results to only include rows where the `CALENDAR_YEAR` field is 2017.
3. Group the results by `LOCATION`, `CALENDAR_YEAR`, and `PopulationCount` to get the total homeless count and population count per county for 2017.
4. Calculate the per capita homeless population using the formula HomelessPopulation / TotalPopulation * 100.
5. Select all these columns to get the required data. 

Please adapt the year field if it changes file format or method of data retrieval. This query specifically outputs for 2017. If your data is stored in a date field, you could convert it using a similar expression from the documentation of your SQL dialect.","SELECT EAHAD.LOCATION AS County, (SUM(EAHAD.EXPERIENCING_HOMELESSNESS_CNT) / SUM((SELECT PopulationCount FROM us_population_county WHERE County = EAHAD.LOCATION))) AS Homeless_Population_per_Capita
FROM experiencing_homelessness_age_demographics EAHAD
WHERE EAHAD.CALENDAR_YEAR = 2017 
AND EAHAD.LOCATION = 'California'
GROUP BY EAHAD.LOCATION 
ORDER BY Homeless_Population_per_Capita DESC;"
Get homeless population per capita and US shooting incidents per million capita for each county of California.,"

SELECT T5.County, T5.HomelessnessCountCapita, T6.ShootingsPerMillionCapita FROM
(
SELECT T2.County , (CAST(T1.HomelessnessCount AS decimal) / CAST((T2.PopulationCountSum) AS decimal)) AS HomelessnessCountCapita FROM
(SELECT sum(EXPERIENCING_HOMELESSNESS_CNT) as HomelessnessCount, lower(LOCATION) as Area FROM experiencing_homelessness_age_demographics WHERE LOCATION NOT LIKE ""california"" AND CALENDAR_YEAR=2020 AND LOCATION NOT LIKE '%(los angeles county)%' group by Area order by HomelessnessCount) T1
join
(SELECT County, Sum(PopulationCount) as PopulationCountSum FROM us_population_county GROUP BY County) T2
ON T1.Area LIKE concat('%', T2.County, '%')
) T5
JOIN
(
SELECT T4.County, (CAST(T3.IncidentCount AS decimal) / CAST((T4.PopulationCount/1000000) AS decimal)) AS ShootingsPerMillionCapita FROM 
(SELECT CityOrCounty, Count(*) AS IncidentCount from us_shootings GROUP BY CityOrCounty) T3
JOIN 
(SELECT County, PopulationCount FROM us_population_county GROUP BY County, PopulationCount) T4
ON T3.CityOrCounty LIKE T4.County
) T6
ON T5.County LIKE concat('%', T6.County, '%')
ORDER BY ShootingsPerMillionCapita DESC","experiencing_homelessness_age_demographics (CALENDAR_YEAR, LOCATION, AGE_GROUP_PUBLIC, EXPERIENCING_HOMELESSNESS_CNT)
us_population_county (PopulationCount, County)
us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)","2,017; California; 25-34; 28,654
2,017; California; 35-44; 25,831
2,017; California; 45-54; 27,651
2,017; California; 55-64; 23,396
2,017; California; 65+; 7,111

10,014,009; los angeles
5,275,541; cook
4,420,568; maricopa
3,298,634; san diego
3,186,989; orange

92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0 
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8"," To fulfill the request, we need to join the provided tables in a way that helps us find the necessary information. We can join the experiencing_homelessness_age_demographics table with itself to get the total experiencing homelessness count per county, then join this aggregated data with the us_population_county table to calculate homelessness per capita. For US shootings, we can join the us_shootings table with the us_population_county table to find total shootings per county, and then calculate shootings per million capita.

Here's the SQL query:

```sql
WITH homelessness_count AS (
  SELECT
    e1.LOCATION,
    SUM(e1.EXPERIENCING_HOMELESSNESS_CNT) AS total_homelessness
  FROM
    experiencing_homelessness_age_demographics e1
  WHERE
    e1.CALENDAR_YEAR = 'current_year' --replace 'current_year' with the actual year
  GROUP BY
    e1.LOCATION
),
total_population AS (
  SELECT
    County,
    PopulationCount
  FROM
    us_population_county
),
shootings_count AS (
  SELECT
    SUBSTRING(Address FROM 1 FOR LOCATE(' ', SUBSTRING(Address FROM LOCATE(' ', Address) + 1)) - 1) AS Location,
    COUNT(*) AS shootings
  FROM
    us_shootings
  WHERE
    State = 'California' --filter California shootings
    AND IncidentDate = 'current_year-01-01' --replace 'current_year-01-01' with the first day of the year
  GROUP BY
    Location
)

SELECT
  h.LOCATION AS County,
  h.total_homelessness / t.PopulationCount AS Homeless_Per_Capita,
  COALESCE(s.shootings, 0) / (t.PopulationCount / 1000000) AS Shootings_Per_Million_Capita
FROM
  homelessness_count h
  JOIN total_population t ON h.LOCATION = t.County
  LEFT JOIN shootings_count s ON h.LOCATION = s.Location
ORDER BY
  Homeless_Per_Capita DESC
LIMIT 100 --You can change this value if you want top 'n' counts
```

This query will provide you with the Homeless Per Capita and Shootings Per Million Capita for each county in California. Remember to replace 'current_year' in the query with the actual year you're interested in.

Note: This approach assumes that the location in the experiencing_homelessness_age_demographics table and the shootings address in the us_shootings table have comparable names but might require further matching or refining for the query to return accurate results.","SELECT a.LOCATION,
       a.EXPERIENCING_HOMELESSNESS_CNT / b.PopulationCount AS 'Homeless Population per Capita',
       c.US_SHOOTINGS_PER_MILLION_CAPITA
FROM experiencing_homelessness_age_demographics a
JOIN us_population_county b ON a.LOCATION = b.County
JOIN (SELECT LOCATION, COUNT(IncidentDate) AS 'US_SHOOTINGS_PER_MILLION_CAPITA' FROM us_shootings WHERE State = 'California'
    GROUP BY LOCATION) c ON a.LOCATION = c.LOCATION ;"
"For each county, get shooting incidents per million capita, and income per million capita.","SELECT T5.County, T5.MedianFamilyIncomePerMillionCapita, T6.ShootingsPerMillionCapita FROM
(
SELECT T2.County , (CAST(T1.MedianFamilyIncome AS decimal) / CAST((T2.PopulationCountSum/1000000) AS decimal)) AS MedianFamilyIncomePerMillionCapita FROM
(SELECT avg(MedianFamilyIncome) as MedianFamilyIncome, lower(County) as Area FROM food_access group by Area order by MedianFamilyIncome) T1
join
(SELECT County, Sum(PopulationCount) as PopulationCountSum FROM us_population_county GROUP BY County) T2
ON T1.Area LIKE concat('%', T2.County, '%')
) T5
JOIN
(
SELECT T4.County, (CAST(T3.IncidentCount AS decimal) / CAST((T4.PopulationCount/1000000) AS decimal)) AS ShootingsPerMillionCapita FROM 
(SELECT CityOrCounty, Count(*) AS IncidentCount from us_shootings GROUP BY CityOrCounty) T3
JOIN 
(SELECT County, PopulationCount FROM us_population_county GROUP BY County, PopulationCount) T4
ON T3.CityOrCounty LIKE T4.County
) T6
ON T5.County LIKE concat('%', T6.County, '%')
ORDER BY ShootingsPerMillionCapita DESC","food_access (CensusTract, State, County, Urban, Pop2010, Ohu2010, LILATracts_1And10, LILATracts_halfAnd10, LILATracks_1And20, LILATracts Vehicle, HUNVFlag, LowIncomeTracts, PovertyRate, MedianFamilyIncome, LA1and10, LAhalfand10, LA1and20, LATracts_half, LATracts1, LATracts10, LATracts20, LATractsVehicle_20, LAPOP1_10, LAPOP05_10, LAPOP1_20, LALOWI1_10, LALOWI05_10, LALOWI1_20, lapophalf, lalowihalf, lakidshalf, laseniorshalf, lawhitehalf, lablackhalf, laasianhalf, lanhopihalf, laaianhalf, laomultirhalf, lahisphalf, lahunvhalf, lasnaphalf, lapop1, lalowi1, lakids1, laseniors1, lawhite1, lablack1, laasian1, lanhopi1, laaian1, laomultir1, lahisp1, lahunv1, lasnap1, lapop10, lalowi10, lakids10, laseniors10, lawhite10, lablack10, laasian10, lanhopi10, laaian10, laomultir10, lahisp10, lahunv10, lasnap10, lapop20, lalowi20, lakids20, laseniors20, lawhite20, lablack20, laasian20, lanhopi20, laaian20, laomultir20, lahisp20, lahunv20, lasnap20, TractLOWI, TractKids, TractSeniors, TractWhite, TractBlack, TractAsian, TractNHOPI, TractAIAN, TractOMultir, TractHispanic, TractHUNV, TractSNAP)
us_population_county (PopulationCount, County)
us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)","1001020200; Alabama; Autauga County; True; 2170; 743; True; True; True; False; False; True; 17.8767876787679; 49000.0; True; True; True; True; True; False; False; False; 1260.99165114062; 2169.99999844283; 1260.99165114062; 603.892736822134; 962.199452747125; 603.892736822134; 2169.99999844283; 962.199452747125; 606.000004256843; 214.000000738888; 888.0000034582339; 1216.99999422708; 5.00000016423473; 0.0; 5.00000025414192; 55.000000683561694; 75.0000008789939; 92.6735537431232; 161.207232792236; 1260.99165114062; 603.892736822134; 405.66095126047696; 126.604568023526; 356.61774701043; 854.189484903007; 4.00000012698183; 0.0; 4.396176368820311; 41.788243642047696; 32.9808816386503; 66.9035368359182; 96.2081004927459; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 802.0; 606.0; 214.0; 888.0; 1217.0; 5.0; 0.0; 5.0; 55.0; 75.0; 89.0; 156.0
1001020300; Alabama; Autauga County; True; 3373; 1256; False; False; False; False; False; False; 15.0460299194476; 62609.0; True; True; True; True; True; False; False; False; 1551.703935422; 2856.85924210027; 1551.703935422; 478.26088600792; 971.1124754119661; 478.26088600792; 2856.85924210027; 971.1124754119661; 771.0404631514099; 357.634553509532; 2176.59024707042; 554.235596228391; 10.268051495892; 0.999999994412065; 10.2426894805394; 104.522662476986; 77.61247311893379; 38.766794804483695; 138.827400866081; 1551.703935422; 478.26088600792; 416.14412296470306; 200.909176319838; 1241.65069302917; 255.139124440029; 8.03314933297224; 0.0; 2.07600623974577; 44.8049664590508; 36.2625889331102; 0.0; 73.6664877342992; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 1306.0; 894.0; 439.0; 2576.0; 647.0; 17.0; 5.0; 11.0; 117.0; 87.0; 99.0; 172.0
1001020400; Alabama; Autauga County; True; 4386; 1722; False; False; False; False; False; False; 2.84521012790394; 70607.0; True; True; True; True; True; False; False; False; 1363.46688491851; 3651.0610152557506; 1363.46688491851; 343.21566302795; 893.201509368606; 343.21566302795; 3651.0610152557506; 893.201509368606; 846.6137828379871; 766.5214912407101; 3395.06192030013; 170.065451807342; 14.8747536134906; 2.63838410377502; 8.03340606880374; 60.3871135036461; 61.4377790470608; 19.4224390552845; 84.08552581025289; 1363.46688491851; 343.21566302795; 345.966882281005; 236.526444971561; 1233.27443863451; 80.94741975702351; 6.87503228150308; 2.0; 3.53994023916312; 36.8300541522913; 29.8595399348997; 7.94138001510873; 30.3018299518153; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 922.0; 1015.0; 904.0; 4086.0; 193.0; 18.0; 4.0; 11.0; 74.0; 85.0; 21.0; 98.0
1001020500; Alabama; Autauga County; True; 10766; 4082; False; False; False; False; True; False; 15.150890925945; 96334.0; True; True; True; True; True; False; False; True; 2643.09516064357; 7778.3961880384; 2643.09516064357; 586.413137416705; 1718.88530989026; 586.413137416705; 7778.3961880384; 1718.88530989026; 2309.47565054335; 839.885470594745; 6298.71033511916; 1000.6784957815; 208.982770854025; 5.196509700734169; 37.9940500581579; 226.834061708068; 276.914590887143; 163.892167929414; 235.035150883414; 2643.09516064357; 586.413137416705; 714.553589399904; 361.67550483206304; 2167.77135492349; 343.210836007725; 47.494541832595104; 0.953196540474892; 13.5609651138948; 70.1042781749275; 85.8137559707975; 55.2118834015855; 83.1438104688859; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 2242.0; 3162.0; 1126.0; 8666.0; 1437.0; 296.0; 9.0; 48.0; 310.0; 355.0; 230.0; 339.0
1001020600; Alabama; Autauga County; True; 3668; 1311; True; True; True; False; False; True; 21.5776633233939; 69521.0; True; True; True; True; True; False; False; False; 3437.56507732149; 3668.0000076982; 3437.56507732149; 1584.76866440132; 1673.78599370766; 1584.76866440132; 3668.0000076982; 1673.78599370766; 1008.00000233381; 411.000002040586; 2751.00001292943; 739.999998836371; 9.00000009796349; 1.00000003864989; 10.000000123342; 156.999999912572; 175.999999234802; 72.5906576564921; 220.468470616936; 3437.56507732149; 1584.76866440132; 954.764219199693; 374.78767248062707; 2539.09242930904; 726.240667275852; 9.00000009796349; 1.00000003864989; 9.46368354884908; 152.768304235884; 168.392079646117; 71.709784436749; 205.885418922378; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 1659.0; 1008.0; 411.0; 2751.0; 740.0; 9.0; 1.0; 10.0; 157.0; 176.0; 71.0; 224.0

10,014,009; los angeles
5,275,541; cook
4,420,568; maricopa
3,298,634; san diego
3,186,989; orange

92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0 
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8"," To fulfill the request, we need to join the us_population_county and us_shootings tables and calculate shooting incidents per million capita and income per million capita for each county. Here's a SQL query that can achieve this:

```sql

WITH shootings_per_county AS (

    SELECT 
        us_population_county.County, 
        (SUM(us_shootings.IncidentID) AS TotalShootings, 
        (US_population_County.PopulationCount * 1.000000000000) AS PeopleCount

    FROM 
        us_population_county 
    LEFT JOIN 
        us_shootings ON us_population_county.County = us_shootings.County
    GROUP BY 
        us_population_county.County

),

shootings_per_capita AS (

    SELECT 
        County,
        (TotalShootings / PeopleCount) * 1000000 AS ShootingsPerMIllionCapita

    FROM 
        shootings_per_county
),

income_loss_income AS (

    SELECT 
        County,
        MedianFamilyIncome * 1.000000000000 AS MillionCapitaIncome

    FROM 
        us_population_county

)

SELECT 
    shootings_per_capita.County,
    COALESCE(ShootingsPerMIllionCapita, 0) AS ShootingsPerMIllionCapita,
    COALESCE(MillionCapitaIncome, 0) AS IncomePerMIllionCapita
FROM
    shootings_per_capita
LEFT JOIN
    income_loss_income ON shootings_per_capita.County = income_loss_income.County
```

This query first creates a CTE named `shootings_per_county`, which joins the `us_population_county` and `us_shootings` tables and calculates the total number of shootings in each county. Then, another CTE named `shootings_per_capita` is created to calculate the number of shooting per million capita by dividing the total number of shootings by the total population of each county and multiplying the result by one million.

A third CTE named `income_loss_income` is created to calculate the income per million capita in each county by simply selecting the `MedianFamilyIncome` column from the `us_population_county` table and multiplying it by one million. 

Finally, the main SELECT statement joins the two CTEs together using a LEFT JOIN on the County column and returns the results with the names of the counties, shooting incidents per million capita, and income per million capita. The COALESCE function is used to return a zero value when the results of the calculations are NULL (in case a county does not exist in the `income_loss_income` table and there is no income data available. 

Please note that this query does not calculate income per capita for people that would have been in poverty. If it is important to capture that information, you can modify the `income_loss_income` CTE to accommodate your specific needs. Additionally, the above query assumes that the MedianFamilyIncome column is available in the us_population_county table. If it is labeled differently, please adjust the SQL query accordingly.","SELECT c.County, 
       (SELECT COUNT(s.IncidentID) 
        FROM us_shootings s 
        WHERE s.State = c.State) AS Shooting_Incidents_per_Million_Capita,
       (SELECT SUM(s.VictimsKilled + s.VictimsInjured) 
        FROM us_shootings s 
        WHERE s.State = c.State) AS Income_per_Million_Capita
  FROM us_population_county c
 GROUP BY c.County;"
"For each state, get shooting incidents per million capita, and income per million capita.","SELECT T5.State, T5.MedianFamilyIncomePerMillionCapita, T6.ShootingsPerMillionCapita FROM
(
SELECT T2.State , (CAST(T1.MedianFamilyIncome AS decimal) / CAST((T2.PopulationCountSum/1000000) AS decimal)) AS MedianFamilyIncomePerMillionCapita FROM
(SELECT avg(MedianFamilyIncome) as MedianFamilyIncome, lower(State) as State FROM food_access group by State order by MedianFamilyIncome) T1
join
(SELECT State, Sum(PopulationCount) as PopulationCountSum FROM us_population GROUP BY State) T2
ON T1.State LIKE concat('%', T2.State, '%')
) T5
JOIN
(
SELECT T4.State, (CAST(T3.IncidentCount AS decimal) / CAST((T4.PopulationCount/1000000) AS decimal)) AS ShootingsPerMillionCapita FROM 
(SELECT State, Count(*) AS IncidentCount from us_shootings GROUP BY State) T3
JOIN 
(SELECT State, PopulationCount FROM us_population GROUP BY State, PopulationCount) T4
ON T3.State LIKE T4.State
) T6
ON T5.State LIKE concat('%', T6.State, '%')
ORDER BY ShootingsPerMillionCapita DESC","food_access (CensusTract, State, County, Urban, Pop2010, Ohu2010, LILATracts_1And10, LILATracts_halfAnd10, LILATracks_1And20, LILATracts Vehicle, HUNVFlag, LowIncomeTracts, PovertyRate, MedianFamilyIncome, LA1and10, LAhalfand10, LA1and20, LATracts_half, LATracts1, LATracts10, LATracts20, LATractsVehicle_20, LAPOP1_10, LAPOP05_10, LAPOP1_20, LALOWI1_10, LALOWI05_10, LALOWI1_20, lapophalf, lalowihalf, lakidshalf, laseniorshalf, lawhitehalf, lablackhalf, laasianhalf, lanhopihalf, laaianhalf, laomultirhalf, lahisphalf, lahunvhalf, lasnaphalf, lapop1, lalowi1, lakids1, laseniors1, lawhite1, lablack1, laasian1, lanhopi1, laaian1, laomultir1, lahisp1, lahunv1, lasnap1, lapop10, lalowi10, lakids10, laseniors10, lawhite10, lablack10, laasian10, lanhopi10, laaian10, laomultir10, lahisp10, lahunv10, lasnap10, lapop20, lalowi20, lakids20, laseniors20, lawhite20, lablack20, laasian20, lanhopi20, laaian20, laomultir20, lahisp20, lahunv20, lasnap20, TractLOWI, TractKids, TractSeniors, TractWhite, TractBlack, TractAsian, TractNHOPI, TractAIAN, TractOMultir, TractHispanic, TractHUNV, TractSNAP)
us_population (CensurYear, State, PopulationCount)
us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)","1001020200; Alabama; Autauga County; True; 2170; 743; True; True; True; False; False; True; 17.8767876787679; 49000.0; True; True; True; True; True; False; False; False; 1260.99165114062; 2169.99999844283; 1260.99165114062; 603.892736822134; 962.199452747125; 603.892736822134; 2169.99999844283; 962.199452747125; 606.000004256843; 214.000000738888; 888.0000034582339; 1216.99999422708; 5.00000016423473; 0.0; 5.00000025414192; 55.000000683561694; 75.0000008789939; 92.6735537431232; 161.207232792236; 1260.99165114062; 603.892736822134; 405.66095126047696; 126.604568023526; 356.61774701043; 854.189484903007; 4.00000012698183; 0.0; 4.396176368820311; 41.788243642047696; 32.9808816386503; 66.9035368359182; 96.2081004927459; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 802.0; 606.0; 214.0; 888.0; 1217.0; 5.0; 0.0; 5.0; 55.0; 75.0; 89.0; 156.0
1001020300; Alabama; Autauga County; True; 3373; 1256; False; False; False; False; False; False; 15.0460299194476; 62609.0; True; True; True; True; True; False; False; False; 1551.703935422; 2856.85924210027; 1551.703935422; 478.26088600792; 971.1124754119661; 478.26088600792; 2856.85924210027; 971.1124754119661; 771.0404631514099; 357.634553509532; 2176.59024707042; 554.235596228391; 10.268051495892; 0.999999994412065; 10.2426894805394; 104.522662476986; 77.61247311893379; 38.766794804483695; 138.827400866081; 1551.703935422; 478.26088600792; 416.14412296470306; 200.909176319838; 1241.65069302917; 255.139124440029; 8.03314933297224; 0.0; 2.07600623974577; 44.8049664590508; 36.2625889331102; 0.0; 73.6664877342992; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 1306.0; 894.0; 439.0; 2576.0; 647.0; 17.0; 5.0; 11.0; 117.0; 87.0; 99.0; 172.0
1001020400; Alabama; Autauga County; True; 4386; 1722; False; False; False; False; False; False; 2.84521012790394; 70607.0; True; True; True; True; True; False; False; False; 1363.46688491851; 3651.0610152557506; 1363.46688491851; 343.21566302795; 893.201509368606; 343.21566302795; 3651.0610152557506; 893.201509368606; 846.6137828379871; 766.5214912407101; 3395.06192030013; 170.065451807342; 14.8747536134906; 2.63838410377502; 8.03340606880374; 60.3871135036461; 61.4377790470608; 19.4224390552845; 84.08552581025289; 1363.46688491851; 343.21566302795; 345.966882281005; 236.526444971561; 1233.27443863451; 80.94741975702351; 6.87503228150308; 2.0; 3.53994023916312; 36.8300541522913; 29.8595399348997; 7.94138001510873; 30.3018299518153; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 922.0; 1015.0; 904.0; 4086.0; 193.0; 18.0; 4.0; 11.0; 74.0; 85.0; 21.0; 98.0
1001020500; Alabama; Autauga County; True; 10766; 4082; False; False; False; False; True; False; 15.150890925945; 96334.0; True; True; True; True; True; False; False; True; 2643.09516064357; 7778.3961880384; 2643.09516064357; 586.413137416705; 1718.88530989026; 586.413137416705; 7778.3961880384; 1718.88530989026; 2309.47565054335; 839.885470594745; 6298.71033511916; 1000.6784957815; 208.982770854025; 5.196509700734169; 37.9940500581579; 226.834061708068; 276.914590887143; 163.892167929414; 235.035150883414; 2643.09516064357; 586.413137416705; 714.553589399904; 361.67550483206304; 2167.77135492349; 343.210836007725; 47.494541832595104; 0.953196540474892; 13.5609651138948; 70.1042781749275; 85.8137559707975; 55.2118834015855; 83.1438104688859; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 2242.0; 3162.0; 1126.0; 8666.0; 1437.0; 296.0; 9.0; 48.0; 310.0; 355.0; 230.0; 339.0
1001020600; Alabama; Autauga County; True; 3668; 1311; True; True; True; False; False; True; 21.5776633233939; 69521.0; True; True; True; True; True; False; False; False; 3437.56507732149; 3668.0000076982; 3437.56507732149; 1584.76866440132; 1673.78599370766; 1584.76866440132; 3668.0000076982; 1673.78599370766; 1008.00000233381; 411.000002040586; 2751.00001292943; 739.999998836371; 9.00000009796349; 1.00000003864989; 10.000000123342; 156.999999912572; 175.999999234802; 72.5906576564921; 220.468470616936; 3437.56507732149; 1584.76866440132; 954.764219199693; 374.78767248062707; 2539.09242930904; 726.240667275852; 9.00000009796349; 1.00000003864989; 9.46368354884908; 152.768304235884; 168.392079646117; 71.709784436749; 205.885418922378; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; 1659.0; 1008.0; 411.0; 2751.0; 740.0; 9.0; 1.0; 10.0; 157.0; 176.0; 71.0; 224.0

2010; alabama; 4779736
2010; alaska; 710231
2010; american samoa; 55519
2010; arizona; 6392017
2010; arkansas; 477936

92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0 
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8"," To fulfill the given request, we can write an SQL query that joins the `food_access` and `us_population` tables on the state column and calculates shooting incidents per million capita and income per million capita for each state. Here's the query:

```sql
WITH incidents AS (
  SELECT 
    fc.State,
    COUNT(fs.IncidentID) as Shooting_Incidents,
    SUM(usp.PopulationCount) as Total_Population
  FROM 
    us_shootings fs
  JOIN 
    us_population usp ON fs.State = usp.State
  GROUP BY 
    fc.State
),
incidents_per_million AS (
  SELECT 
    f.State,
    (Shooting_Incidents / Total_Population) * 1000000 as Shooting_Incidents_Per_Million,
    SUM(f.HUNVFlag * f.MedianFamilyIncome)/Total_Population * 1000000 as Income_Per_Million
  FROM 
    food_access f 
  JOIN 
    incidents i ON f.State = i.State
  GROUP BY 
    f.State
)
SELECT 
  ipm.State, 
  Shooting_Incidents_Per_Million,
  Income_Per_Million
FROM 
  incidents_per_million ipm;
```

This query creates two CTEs (Common Table Expressions). The first CTE, `incidents`, calculates the total shooting incidents and population count for each state. The second CTE, `incidents_per_million`, calculates the shooting incidents per million and income per million for each state using the `food_access` and `us_population` tables.

Finally, it selects the state, shooting incidents per million, and income per million values from the `incidents_per_million` CTE.","SELECT s.State,
       (100.0 * us_shootings.VictimsKilled / us_population.PopulationCount) AS Shooting_Incidents_Per_Million_Capita,
       (100.0 * MedianFamilyIncome / 1000000) AS Income_Per_Million_Capita
FROM us_population
         JOIN us_shootings ON us_population.State = us_shootings.State
         JOIN food_access ON us_population.State = food_access.State
WHERE us_population.CensurYear = 2010;"
"For each county, get victims killed per million capita, victims injured per million capita, suspects arrested per million capita, and incident counts for million capita.","SELECT T1.County, (CAST(T1.VictimsKilled as decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS VictimsKilledPerCapita, (CAST(T1.VictimsInjured as decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS VictimsInjuredPerCapita,
(CAST(T1.IncidentCount as decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS IncidentCountPerCapita, (CAST(T1.SuspectsArrested as decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS SuspectsArrestedPerCapita FROM
(Select sum(VictimsKilled) as VictimsKilled, SUM(VictimsInjured) as VictimsInjured, Count(*) AS IncidentCount, Sum(SuspectsArrested) AS SuspectsArrested, lower(CityOrCounty) as County from us_shootings group by County) T1
JOIN 
(SELECT County, Sum(PopulationCount) as PopulationCount FROM us_population_county GROUP BY County) T2
ON T2.County LIKE T1.County
ORDER BY VictimsKilledPerCapita DESC","us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)
us_population_county (PopulationCount, County)","92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8

10,014,009; los angeles
5,275,541; cook
4,420,568; maricopa
3,298,634; san diego
3,186,989; orange"," Here is the SQL query to fulfill the requested data:

```sql
SELECT 
    p.County,
    ROUND((SUM(u.VictimsKilled)*1000000.0)/p.PopulationCount, 2) AS VictimsKilledPerMillionCapita,
    ROUND((SUM(u.VictimsInjured)*1000000.0)/p.PopulationCount, 2) AS VictimsInjuredPerMillionCapita,
    ROUND((SUM(u.SuspectsArrested)*1000000.0)/p.PopulationCount, 2) AS SuspectsArrestedPerMillionCapita,
    ROUND(COUNT(u.IncidentID)*1000000.0/p.PopulationCount, 2) AS IncidentCountsPerMillionCapita
FROM us_shootings u
JOIN us_population_county p
    ON u.CityOrCountry = p.County
GROUP BY p.County
ORDER BY VictimsKilledPerMillionCapita DESC, VictimsInjuredPerMillionCapita DESC, SuspectsArrestedPerMillionCapita DESC, IncidentCountsPerMillionCapita DESC;
```

This query joins the `us_shootings` table with the `us_population_county` table on the `CityOrCountry` and `County` columns, respectively. It then groups the results by the county (`p.County`) and calculates the following metrics per million capita:

- Victims killed per million capita (ROUND(SUM(u.VictimsKilled) * 1000000 / p.PopulationCount, 2)).
- Victims injured per million capita (ROUND(SUM(u.VictimsInjured) * 1000000 / p.PopulationCount, 2)).
- Suspects arrested per million capita (ROUND(SUM(u.SuspectsArrested) * 1000000 / p.PopulationCount, 2)).
- Incident counts per million capita (ROUND(COUNT(u.IncidentID) * 1000000 / p.PopulationCount, 2)).

The result is ordered in descending order of each metric.

To ensure this query works properly, please check that the `CityOrCountry` column of the `us_shootings` table matches the `County` column of the `us_population_county` table accurately, as the join condition is based on this match. Adjust column names as needed, if they differ in your actual schema.","To get the requested information, the SQL query would look like this:

```sql
SELECT
    us_population_county.County as County,
    us_population_county.PopulationCount as TotalPopulation,
    (SELECT COUNT(us_shootings.IncidentID) FROM us_shootings) as TotalIncidents,
    (SELECT (SUM(us_shootings.VictimsKilled) / us_population_county.PopulationCount) * 1000000 FROM us_shootings) as VictimsKilledPerMillion,
    (SELECT (SUM(us_shootings.VictimsInjured) / us_population_county.PopulationCount) * 1000000 FROM us_shootings) as VictimsInjuredPerMillion,
    (SELECT (SUM(us_shootings.SuspectsKilled) / us_population_county.PopulationCount) * 1000000 FROM us_shootings) as SuspectsKilledPerMillion,
    (SELECT (SUM(us_shootings.SuspectsArrested) / us_population_county.PopulationCount) * 1000000 FROM us_shootings) as SuspectsArrestedPerMillion
FROM us_population_county
LEFT JOIN us_shootings ON true
GROUP BY us_population_county.County;
```

This query assumes your version of SQL supports subqueries and left joins. It calculates victims killed per million and injured per million, suspects killed per million, and suspects arrested per million, and total incidents per population for each county. It starts by joining the us_population_county with us_shootings on true (which essentially gives us all populations regardless of shooting data), and then groups by county to calculate the desired values for each one."
"For each state, get shooting incidents per million capita.","SELECT T1.State, (CAST(T1.IncidentCount AS decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS ShootingsPerMillionCapita FROM 
(SELECT State, Count(*) AS IncidentCount from us_shootings GROUP BY State) T1
JOIN 
(SELECT State, PopulationCount FROM us_population GROUP BY State, PopulationCount) T2
ON T1.State LIKE T2.State
ORDER BY ShootingsPerMillionCapita DESC","us_population (CensurYear, State, PopulationCount)
us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)","2010; alabama; 4779736
2010; alaska; 710231
2010; american samoa; 55519
2010; arizona; 6392017
2010; arkansas; 477936

92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0 
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8"," To fulfill the natural language request, we can write the following SQL query:

```sql
SELECT 
    s.State,
    COUNT(sh.SuspectsArrest) AS Shootings,
    ((COUNT(sh.SuspectsArrest) / up.PopulationCount) * 1000000) AS ShootingsPerMilia
FROM
    us_population up
JOIN
    us_shootings sh ON up.State = sh.State
WHERE
    up.CensurYear = 2010 
GROUP BY
    s.State,
    up.PopulationCount
ORDER BY
    ShootingsPerMilia DESC;
```

This query joins the `us_population` and `us_shootings` tables on the `State` column, and filters the data to include populations from the year 2010. The data is then grouped by `State` and `PopulationCount`, and the number of shootings and the shootings per million capita are calculated and selected for each state. Finally, the results are ordered in descending order of the number of shootings per million capita.","To get the shooting incidents per million capita for each state, you should first calculate the total population for each state by summing up the population counts from the us_population table. Then, join this data with the us_shootings table to get the count of shooting incidents. Finally, calculate the incidents per million capita by dividing the shooting incidents count by the total state population, and then multiplying the result by 1,000,000 to convert it to a per million scale. Here is the SQL query:

```sql
SELECT 
    u.State,
    COALESCE(s.incidents_per_million, 0) as incidents_per_million
FROM (
    SELECT 
        State,
        COUNT(State) as total_population,
        COUNT(State) FILTER (WHERE EventType = 'Shooting') as total_shooting_incidents
    FROM us_population
    JOIN us_shootings ON us_population.State = us_shootings.State
    WHERE USING_TABLE = 'us_shootings' 
    GROUP BY State
) u
LEFT JOIN (
    SELECT 
        State,
    	COUNT(*) / COALESCE(POPULATION_COUNT, 1) * 1000000 as incidents_per_million
    FROM us_population
    GROUP BY State
) s ON u.State = s.State
ORDER BY incidents_per_million DESC;
```
This query uses a LEFT JOIN to compensate for states that might have no recorded shootings. The table `us_population` is partitioned by `USING_TABLE` to perform separate aggregations for the population tables and the shooting events table. Then, we join the result of these two subqueries to get the final result."
"For each state, get victims killed per million capita.","SELECT T1.State, (CAST(T1.VictimsKilledCount AS decimal) / CAST((T2.PopulationCount/1000000) AS decimal)) AS VictimsKilledPerMillionCapita FROM 
(SELECT State, year(IncidentDate) as IncidentYear, Sum(VictimsKilled) AS VictimsKilledCount from us_shootings GROUP BY State, IncidentYear) T1
JOIN 
(SELECT State, PopulationCount FROM us_population GROUP BY State, PopulationCount) T2
ON T1.State LIKE T2.State
ORDER BY VictimsKilledPerMillionCapita DESC","us_population (CensurYear, State, PopulationCount)
us_shootings (IncidentID, Address, IncidentDate, State, CityOrCountry, VictimsKilled, VictimsInjured, SuspectsInjured, SuspectsKilled, SuspectsArrested)","2010; alabama; 4779736
2010; alaska; 710231
2010; american samoa; 55519
2010; arizona; 6392017
2010; arkansas; 477936

92194; Rockingham Street and Berkley Avenue Extended; January 1, 2014; virginia; Norfolk; 2; 2; 0; 0; 0 
92704; Farmers Boulevard and 133rd Avenue; January 3, 2014; new york; Queens; 1; 3; 0; 0; 0
94514; 829 Parade St; January 5, 2014; pennsylvania; Erie; 1; 3; 0; 0; 0
95146; 3430 W. Capitol Street; January 11, 2014; mississippi; Jackson; 0; 4; 0; 0; 0
95500; 3600 block of Highway 80 W; January 12, 2014; louisiana; Tallulah; 0; 6; 0; 0; 8"," To fulfill the request, you can write an SQL query like this:

```sql
SELECT 
    ss.State,
    (SUM(ss.VictimsKilled) / (up.PopulationCount / 1000000)) AS Victims_Killed_Per_Million
FROM 
    us_shootings ss
JOIN 
    us_population up
ON 
    ss.State = up.State
GROUP BY 
    ss.State, 
    up.PopulationCount
ORDER BY 
    Victims_Killed_Per_Million DESC
```

In this query:

- The `us_population` table is joined with the `us_shootings` table on the `State` column. 
- The number of victims killed per million capita is calculated by dividing the total victims killed in each state by the population count of that state divided by 1,000,000.
- The result is grouped by the `State` column.
- The query returns the state name and the victims killed per million capita, ordered in descending order based on the victims killed per million capita.","SELECT 
    s.State, 
    (s.PopulationCount / IFNULL((
        SELECT COUNT(*) 
        FROM us_shootings s2 
        WHERE s2.State = s.State AND s2.VictimsKilled > 0
    ), 0)) as VictimsKilledPerMillion
FROM 
    us_shootings s 
JOIN 
    us_population p 
ON 
    s.State = p.State 
GROUP BY 
    s.State
ORDER BY 
    p.State;"
